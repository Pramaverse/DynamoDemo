package com.prama.demo.dynamo.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;

@Slf4j
@Configuration
public class DynamoConfig {

    @Value("${aws.region:us-east-1}") String region;

    @Bean(destroyMethod = "close")
    public DynamoDbClient dynamoDbClient() {
        return DynamoDbClient.builder()
            .credentialsProvider(ProfileCredentialsProvider.create())
            .region(Region.of(region))
            .build();
    }

    @Bean
    public DynamoDbEnhancedClient dynamoDbEnhancedClient(DynamoDbClient ddb) {
        return DynamoDbEnhancedClient.builder()
            .dynamoDbClient(ddb)
            .build();
    }


//    @Bean
//    public DynamoDbEnhancedAsyncClient getDefaultDynamoDBClient(
//        @Qualifier("ddbAsyncExecutor") Executor ddbAsyncExecutor) {
//        final String region = "us-east-2";
//        log.info("Connecting to AWS dynamodb instance in region: {}.", region);
//        return DynamoDbEnhancedAsyncClient.builder()
//            .dynamoDbClient(
//                DynamoDbAsyncClient.builder()
//                    .httpClient(getHttpClient())
//                    .overrideConfiguration(clientOverrideConfiguration())
//                    .region(Region.of(region))
//                    .asyncConfiguration(builder -> builder.advancedOption(
//                        SdkAdvancedAsyncClientOption.FUTURE_COMPLETION_EXECUTOR, ddbAsyncExecutor))
//                    .build())
//            .extensions(getExtensions())
//            .build();
//    }
//
//    @Bean
//    public ClientOverrideConfiguration clientOverrideConfiguration() {
//        ClientOverrideConfiguration.Builder builder = ClientOverrideConfiguration.builder()
//            .apiCallTimeout(
//                Duration.ofMillis(dynamoDBProperties.getClientExecutionTimeout() != null
//                                  ? dynamoDBProperties.getClientExecutionTimeout() : API_CALL_TIMEOUT))
//            .apiCallAttemptTimeout(Duration.ofMillis(
//                dynamoDBProperties.getRequestTimeout() != null ? dynamoDBProperties.getRequestTimeout()
//                                                               : API_CALL_ATTEMPT_TIMEOUT))
//            .retryPolicy(RetryPolicy.builder().numRetries(
//                    dynamoDBProperties.getMaxErrorRetries() != null ? dynamoDBProperties.getMaxErrorRetries() : MAX_RETRIES)
//                             .retryCondition(RetryCondition.defaultRetryCondition()).build());
//
//        if (ddbMetricsEnabled) {
//            builder.addMetricPublisher(CloudWatchMetricPublisher.builder()
//                                           .namespace(applicationName + "_" + envName)
//                                           .build());
//        }
//        return builder.build();
//    }
//
//    public SdkAsyncHttpClient getHttpClient() {
//        SdkAsyncHttpClient httpClient = NettyNioAsyncHttpClient.builder()
//            .maxConcurrency(clientConfigProperties.getMaxConcurrency())
//            .maxPendingConnectionAcquires(clientConfigProperties.getMaxPendingConnectionAcquires())
//            .build();
//        return httpClient;
//    }
//
//    private List<DynamoDbEnhancedClientExtension> getExtensions() {
//        return Stream.concat(ExtensionResolver.defaultExtensions().stream(),
//                             Stream.of(AutoGeneratedTimestampRecordExtension.create())).collect(Collectors.toList());
//    }
//
//    @Bean
//    public Executor ddbAsyncExecutor() {
//        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
//        executor.setCorePoolSize(executorProperties.getCorePoolSize());
//        executor.setMaxPoolSize(executorProperties.getMaxPoolSize());
//        executor.setQueueCapacity(executorProperties.getQueueCapacity());
//        executor.setThreadNamePrefix(executorProperties.getThreadNamePrefix());
//        executor.initialize();
//
//        return executor;
//    }

}
